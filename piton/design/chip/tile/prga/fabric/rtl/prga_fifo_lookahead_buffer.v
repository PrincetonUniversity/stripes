// Copyright (c) 2024 Princeton University
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the copyright holder nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Automatically generated by PRGA's RTL generator
//
// Convert a non-lookahead FIFO to a lookahead FIFO if REVERSED is 0
// or, convert a lookahead FIFO to a non-lookahead FIFO if REVERSED is 1
`timescale 1ns/1ps
module prga_fifo_lookahead_buffer #(
    parameter DATA_WIDTH = 32,
    parameter REVERSED = 0
) (
    input wire [0:0] clk,
    input wire [0:0] rst,

    input wire [0:0] empty_i,
    output reg [0:0] rd_i,
    input wire [DATA_WIDTH - 1:0] dout_i,

    output reg [0:0] empty,
    input wire [0:0] rd,
    output reg [DATA_WIDTH - 1:0] dout
    );

    generate if (REVERSED) begin
        always @(posedge clk) begin
            dout <= dout_i;
        end

        always @* begin
            empty = empty_i;
            rd_i = rd;
        end
    end else begin
        reg [DATA_WIDTH - 1:0] dout_i_f;
        reg dout_i_valid;

        always @(posedge clk) begin
            if (rst) begin
                empty <= 'b1;
                dout_i_valid <= 'b0;
            end else begin
                if (~empty_i && rd_i) begin
                    empty <= 'b0;
                end else if (rd) begin
                    empty <= 'b1;
                end

                dout_i_valid <= ~empty_i && rd_i;
            end
        end

        always @(posedge clk) begin
            if (dout_i_valid) begin
                dout_i_f <= dout_i;
            end
        end

        always @* begin
            rd_i = empty || rd;
            dout = dout_i_valid ? dout_i : dout_i_f;
        end
    end endgenerate

endmodule