// Copyright (c) 2024 Princeton University
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the copyright holder nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Automatically generated by PRGA's RTL generator
module prga_clkdiv #(
    parameter   COUNTER_WIDTH = 8
) (
    input wire [0:0]                    clk,
    input wire [0:0]                    rst,

    input wire [COUNTER_WIDTH - 1:0]    div_factor_i,
    input wire [0:0]                    div_factor_we_i,

    output reg [COUNTER_WIDTH - 1:0]    div_factor_o,
    output wire [0:0]                   divclk
    );

    reg [COUNTER_WIDTH - 1:0] divclk_cnt;
    reg divclk_muxsel, transient_lock;
    wire internal_divclk, internal_divclk_next;

    assign internal_divclk_next = (transient_lock || div_factor_o == 0 || divclk_cnt != 0) ?
                                  internal_divclk : ~internal_divclk;

    always @(posedge clk) begin
        if (rst) begin
            divclk_cnt <= 'b0;
        end else if (divclk_cnt == 0 || transient_lock) begin
            if (div_factor_o != 0) begin
                divclk_cnt <= div_factor_o - 1;
            end else begin
                divclk_cnt <= 'b0;
            end
        end else begin
            divclk_cnt <= divclk_cnt - 1;
        end
    end

    always @(posedge clk) begin
        if (rst) begin
            div_factor_o <= 'b0;
        end else if (div_factor_we_i) begin
            div_factor_o <= div_factor_i;
        end
    end

    always @(posedge clk) begin
        if (rst) begin
            divclk_muxsel <= 1'b0;
            transient_lock <= 1'b0;
        end else begin
            divclk_muxsel <= div_factor_o != 0;
            transient_lock <= div_factor_we_i;
        end
    end

    // Placeholder for the physical clock generating/muxing logic
    reg internal_divclk_reg;
    assign internal_divclk = internal_divclk_reg;

    always @(posedge clk) begin
        if (rst) begin
            internal_divclk_reg <= 1'b0;
        end else begin
            internal_divclk_reg <= internal_divclk_next;
        end
    end

    assign divclk = divclk_muxsel ? internal_divclk : clk;

endmodule
