// Copyright (c) 2024 Princeton University
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the copyright holder nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Automatically generated by PRGA's RTL generator
`timescale 1ns/1ps
module prga_prim_mul #(
    parameter   WIDTH_A     = 40
    , parameter WIDTH_B     = 40
) (
    input wire [WIDTH_A - 1:0]              a
    , input wire [WIDTH_B - 1:0]            b
    , output reg [WIDTH_A + WIDTH_B - 1:0]  x

    , input wire                            prog_done
    , input wire [1:0]                      prog_data
        // [0]: enable
        // [1]: signed/not unsigned
    );

    reg                             sign_a, sign_b;
    reg [WIDTH_A - 2:0]             val_a;
    reg [WIDTH_B - 2:0]             val_b;
    reg [WIDTH_A + WIDTH_B - 3:0]   val_a_mul_b;

    always @* begin
        {sign_a, val_a} = a;
        {sign_b, val_b} = b;
    end

    always @* begin
        // trust ASIC synthesis tool
        val_a_mul_b = val_a * val_b;
    end

    always @* begin
        if (prog_done && prog_data[0]) begin
            x = {sign_a & sign_b, val_a_mul_b};

            if (sign_a)
                if (prog_data[1])
                    x = x - (val_b << (WIDTH_A - 1));
                else
                    x = x + (val_b << (WIDTH_A - 1));

            if (sign_b)
                if (prog_data[1])
                    x = x - (val_a << (WIDTH_B - 1));
                else
                    x = x + (val_a << (WIDTH_B - 1));

        end else begin
            x = {(WIDTH_A + WIDTH_B) {1'b0} };
        end
    end

endmodule
