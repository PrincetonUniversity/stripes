// Copyright (c) 2024 Princeton University
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the copyright holder nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Automatically generated by PRGA's RTL generator
//
// Adapter between a FIFO pull interface and a FIFO push interface
`timescale 1ns/1ps
module prga_fifo_adapter #(
    parameter DATA_WIDTH = 32,
    parameter INPUT_LOOKAHEAD = 0
) (
    input wire [0:0] clk,
    input wire [0:0] rst,

    input wire [0:0] empty_i,
    output wire [0:0] rd_i,
    input wire [DATA_WIDTH - 1:0] dout_i,

    output wire [0:0] wr_o,
    input wire [0:0] full_o,
    output wire [DATA_WIDTH - 1:0] din_o
    );

    generate if (INPUT_LOOKAHEAD) begin
        assign rd_i = ~full_o;
        assign wr_o = ~empty_i;
        assign din_o = dout_i;
    end else begin
        wire empty_i_lookahead;
        assign wr_o = ~empty_i_lookahead;

        prga_fifo_lookahead_buffer #(
            .DATA_WIDTH             (DATA_WIDTH)
            ,.REVERSED              (0)
        ) buffer (
            .clk                    (clk)
            ,.rst                   (rst)
            ,.empty_i               (empty_i)
            ,.rd_i                  (rd_i)
            ,.dout_i                (dout_i)
            ,.empty                 (empty_i_lookahead)
            ,.rd                    (~full_o)
            ,.dout                  (din_o)
            );
    end endgenerate

endmodule