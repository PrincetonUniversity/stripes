// Copyright (c) 2024 Princeton University
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the copyright holder nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Automatically generated by PRGA's RTL generator
`timescale 1ns/1ps
module prga_bram (
    input wire [0:0] clk
    , input wire [0:0] we
    , input wire [5:0] raddrx0
    , input wire [5:0] waddrx0
    , input wire [15:0] dinx0
    , output wire [15:0] doutx0
    , input wire [4:0] raddrx1
    , input wire [4:0] waddrx1
    , input wire [15:0] dinx1
    , output wire [15:0] doutx1
    , input wire [0:0] prog_clk
    , input wire [0:0] prog_rst
    , input wire [0:0] prog_done
    , input wire [0:0] prog_we
    , input wire [0:0] prog_din
    , output wire [0:0] prog_dout
    , output wire [0:0] prog_we_o
    );
    
        
    wire [31:0] _i_ram__dout;
    wire [0:0] _i_buf_prog_rst_l0__Q;
    wire [0:0] _i_buf_prog_done_l0__Q;
    wire [0:0] _i_scanchain_head__prog_dout;
    wire [0:0] _i_scanchain_head__prog_we_o;
    wire [0:0] _i_prog_data_i_ram__prog_dout;
    wire [1:0] _i_prog_data_i_ram__prog_data;
    wire [0:0] _i_scanchain_tail__prog_dout;
    wire [0:0] _i_scanchain_tail__prog_we_o;
        
    fracram_a11d32 i_ram (
        .clk(clk)
        ,.waddr({waddrx0[5],
            waddrx1[4],
            waddrx0[4],
            waddrx1[3],
            waddrx0[3],
            waddrx1[2],
            waddrx0[2],
            waddrx1[1],
            waddrx0[1],
            waddrx1[0],
            waddrx0[0]})
        ,.din({dinx1[15],
            dinx0[15],
            dinx1[14],
            dinx0[14],
            dinx1[13],
            dinx0[13],
            dinx1[12],
            dinx0[12],
            dinx1[11],
            dinx0[11],
            dinx1[10],
            dinx0[10],
            dinx1[9],
            dinx0[9],
            dinx1[8],
            dinx0[8],
            dinx1[7],
            dinx0[7],
            dinx1[6],
            dinx0[6],
            dinx1[5],
            dinx0[5],
            dinx1[4],
            dinx0[4],
            dinx1[3],
            dinx0[3],
            dinx1[2],
            dinx0[2],
            dinx1[1],
            dinx0[1],
            dinx1[0],
            dinx0[0]})
        ,.we(we)
        ,.raddr({raddrx0[5],
            raddrx1[4],
            raddrx0[4],
            raddrx1[3],
            raddrx0[3],
            raddrx1[2],
            raddrx0[2],
            raddrx1[1],
            raddrx0[1],
            raddrx1[0],
            raddrx0[0]})
        ,.dout(_i_ram__dout)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_ram__prog_data)
        );
    prga_simple_buf i_buf_prog_rst_l0 (
        .C(prog_clk)
        ,.D(prog_rst)
        ,.Q(_i_buf_prog_rst_l0__Q)
        );
    prga_simple_bufr i_buf_prog_done_l0 (
        .C(prog_clk)
        ,.R(_i_buf_prog_rst_l0__Q)
        ,.D(prog_done)
        ,.Q(_i_buf_prog_done_l0__Q)
        );
    scanchain_delim i_scanchain_head (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(prog_we)
        ,.prog_din(prog_din)
        ,.prog_dout(_i_scanchain_head__prog_dout)
        ,.prog_we_o(_i_scanchain_head__prog_we_o)
        );
    scanchain_data_d2 i_prog_data_i_ram (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_scanchain_head__prog_dout)
        ,.prog_dout(_i_prog_data_i_ram__prog_dout)
        ,.prog_data(_i_prog_data_i_ram__prog_data)
        );
    scanchain_delim i_scanchain_tail (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_ram__prog_dout)
        ,.prog_dout(_i_scanchain_tail__prog_dout)
        ,.prog_we_o(_i_scanchain_tail__prog_we_o)
        );
        
    assign doutx0 = {_i_ram__dout[30],
        _i_ram__dout[28],
        _i_ram__dout[26],
        _i_ram__dout[24],
        _i_ram__dout[22],
        _i_ram__dout[20],
        _i_ram__dout[18],
        _i_ram__dout[16],
        _i_ram__dout[14],
        _i_ram__dout[12],
        _i_ram__dout[10],
        _i_ram__dout[8],
        _i_ram__dout[6],
        _i_ram__dout[4],
        _i_ram__dout[2],
        _i_ram__dout[0]};
    assign doutx1 = {_i_ram__dout[31],
        _i_ram__dout[29],
        _i_ram__dout[27],
        _i_ram__dout[25],
        _i_ram__dout[23],
        _i_ram__dout[21],
        _i_ram__dout[19],
        _i_ram__dout[17],
        _i_ram__dout[15],
        _i_ram__dout[13],
        _i_ram__dout[11],
        _i_ram__dout[9],
        _i_ram__dout[7],
        _i_ram__dout[5],
        _i_ram__dout[3],
        _i_ram__dout[1]};
    assign prog_dout = _i_scanchain_tail__prog_dout;
    assign prog_we_o = _i_scanchain_tail__prog_we_o;

endmodule
