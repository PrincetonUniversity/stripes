// Copyright (c) 2024 Princeton University
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the copyright holder nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Automatically generated by PRGA's RTL generator
`timescale 1ns/1ps
module prga_ram_1r1w #(
    parameter   DATA_WIDTH = 32
    , parameter ADDR_WIDTH = 10
    , parameter RAM_ROWS = 0        // default: 2 ** ADDR_WIDTH
) (
    input wire clk
    , input wire rst

    , input wire re
    , input wire [ADDR_WIDTH - 1:0] raddr
    , output reg [DATA_WIDTH - 1:0] dout

    , input wire we
    , input wire [ADDR_WIDTH - 1:0] waddr
    , input wire [DATA_WIDTH - 1:0] din
    , input wire [DATA_WIDTH - 1:0] bw
    );

    localparam  DATA_ROWS = RAM_ROWS == 0 ? (1 << ADDR_WIDTH) : RAM_ROWS;
    reg [DATA_WIDTH - 1:0] data [0:DATA_ROWS - 1];

    always @(posedge clk) begin
        if (rst) begin
            dout    <= {DATA_WIDTH {1'b0} };
        end else begin
            if (we) begin
                data[waddr] <= (bw & din) | (~bw & data[waddr]);
            end

            if (re) begin
                dout <= data[raddr];
            end
        end
    end

endmodule
