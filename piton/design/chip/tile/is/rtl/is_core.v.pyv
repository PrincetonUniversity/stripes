// Copyright (c) 2024 Princeton University
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the copyright holder nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

`include "define.tmp.h"
`include "dmbr_define.v"
`include "l15.tmp.h"
`include "jtag.vh"
`include "dcp.h"
`include "is.h"

<%
import pyhplib
from riscvlib import *
import os
from pyhplib import *
import riscvlib
import sys

# Add pyocn/py to python path
if PITON_NETWORK_CONFIG == "pyocn_config" or PITON_NETWORK_CONFIG == "pyocn_router_config":
    DV_ROOT = os.getenv( 'DV_ROOT' )
    assert DV_ROOT is not None, "Environment variable DV_ROOT is not defined!"
    sys.path.insert( 0, os.path.join( DV_ROOT, 'design/chip/pyocn/py' ) )
    import pyocn_tile_utils
%>

module is_core (
<% 
if PITON_NETWORK_CONFIG == "pyocn_router_config":
    s = '''
    input [`NOC_DATA_WIDTH-1:0]         dyn0_in_N_dat,
    input                               dyn0_in_N_val,
    output                              dyn0_in_N_rdy,
    input [`NOC_DATA_WIDTH-1:0]         dyn1_in_N_dat,
    input                               dyn1_in_N_val,
    output                              dyn1_in_N_rdy,
    input [`NOC_DATA_WIDTH-1:0]         dyn2_in_N_dat,
    input                               dyn2_in_N_val,
    output                              dyn2_in_N_rdy,
    output [`NOC_DATA_WIDTH-1:0]        dyn0_out_N_dat,
    output                              dyn0_out_N_val,
    input                               dyn0_out_N_rdy,
    output [`NOC_DATA_WIDTH-1:0]        dyn1_out_N_dat,
    output                              dyn1_out_N_val,
    input                               dyn1_out_N_rdy,
    output [`NOC_DATA_WIDTH-1:0]        dyn2_out_N_dat,
    output                              dyn2_out_N_val,
    input                               dyn2_out_N_rdy,

    output [`NOC_DATA_WIDTH-1:0]         dyn0_in_N_dat_s2c,
    output                               dyn0_in_N_val_s2c,
    input                                dyn0_in_N_rdy_s2c,
    output [`NOC_DATA_WIDTH-1:0]         dyn1_in_N_dat_s2c,
    output                               dyn1_in_N_val_s2c,
    input                                dyn1_in_N_rdy_s2c,
    output [`NOC_DATA_WIDTH-1:0]         dyn2_in_N_dat_s2c,
    output                               dyn2_in_N_val_s2c,
    input                                dyn2_in_N_rdy_s2c,
    input [`NOC_DATA_WIDTH-1:0]         dyn0_out_N_dat_s2c,
    input                               dyn0_out_N_val_s2c,
    output                              dyn0_out_N_rdy_s2c,
    input [`NOC_DATA_WIDTH-1:0]         dyn1_out_N_dat_s2c,
    input                               dyn1_out_N_val_s2c,
    output                              dyn1_out_N_rdy_s2c,
    input [`NOC_DATA_WIDTH-1:0]         dyn2_out_N_dat_s2c,
    input                               dyn2_out_N_val_s2c,
    output                              dyn2_out_N_rdy_s2c,
    '''
    print(s)
%>

    input  wire                                 clk_gated,
    input  wire                                 rst_n_f,
    input  wire [31:0]                          config_system_tile_count,
    input  wire [`HOME_ALLOC_METHOD_WIDTH-1:0]  config_home_alloc_method,
    input  wire [`NOC_CHIPID_WIDTH-1:0]         config_chipid,
    input  wire [`NOC_X_WIDTH-1:0]              config_coreid_x,
    input  wire [`NOC_Y_WIDTH-1:0]              config_coreid_y,
    input  wire                                 splitter_dev1_vr_noc1_val,
    input  wire [`NOC_DATA_WIDTH-1:0]           splitter_dev1_vr_noc1_dat,
    output wire                                 splitter_dev1_vr_noc1_rdy,
    output wire                                 dev1_merger_vr_noc1_val,  
    output wire [`NOC_DATA_WIDTH-1:0]           dev1_merger_vr_noc1_dat,  
    input  wire                                 dev1_merger_vr_noc1_rdy,  
    input  wire                                 splitter_dev1_vr_noc2_val,
    input  wire [`NOC_DATA_WIDTH-1:0]           splitter_dev1_vr_noc2_dat,
    output wire                                 splitter_dev1_vr_noc2_rdy,
    output wire                                 dev1_merger_vr_noc2_val,  
    output wire [`NOC_DATA_WIDTH-1:0]           dev1_merger_vr_noc2_dat,  
    input  wire                                 dev1_merger_vr_noc2_rdy,  
    input  wire                                 splitter_dev1_vr_noc3_val,
    input  wire [`NOC_DATA_WIDTH-1:0]           splitter_dev1_vr_noc3_dat,
    output wire                                 splitter_dev1_vr_noc3_rdy,
    input  wire                                 l15_transducer_ack,
    input  wire                                 l15_transducer_header_ack,

    output wire                                 transducer_l15_val,
    output wire [`PCX_REQTYPE_WIDTH-1:0]        transducer_l15_rqtype,
    output wire [`L15_AMO_OP_WIDTH-1:0]         transducer_l15_amo_op,
    output wire [`PCX_SIZE_FIELD_WIDTH-1:0]     transducer_l15_size,
    output wire [`L15_PADDR_HI:0]               transducer_l15_address,
    output wire [63:0]                          transducer_l15_data,
    output wire                                 transducer_l15_nc,
    output wire [`L15_THREADID_MASK]            transducer_l15_threadid,
    output wire                                 transducer_l15_prefetch,
    output wire                                 transducer_l15_blockstore,
    output wire                                 transducer_l15_blockinitstore,
    output wire [1:0]                           transducer_l15_l1rplway,
    output wire                                 transducer_l15_invalidate_cacheline,
    output wire [`TLB_CSM_WIDTH-1:0]            transducer_l15_csm_data,
    output wire [63:0]                          transducer_l15_data_next_entry,
    output wire                                 transducer_l15_req_ack,


    input wire                                  l15_transducer_val,
    input wire [3:0]                            l15_transducer_returntype,
    input wire [`L15_THREADID_MASK]             l15_transducer_threadid,
    input wire [63:0]                           l15_transducer_data_0,
    input wire [63:0]                           l15_transducer_data_1

);

    // =======================================================================
    // == Feed through NoC wires =============================================
    // =======================================================================
<% 
if PITON_NETWORK_CONFIG == "pyocn_router_config":
    s = pyocn_tile_utils.feed_through_connection()
    print(s)
%>

// MMU Config iface
wire tlb_disable,tlb_conf_ptbase,tlb_flush,tlb_update;
wire nibbler_conf;
wire [2:0] nibbler_code;
wire [63:0] conf_data;
wire [63:0] nibbler_ariane_data;
// TLB req/res iface
wire tlb_req,tlb_ack,tlb_val,tlb_exc;
wire tlb_exc_val = tlb_val && tlb_exc;
wire [`DCP_VADDR-1:0]  tlb_vaddr,tlb_ptw_vaddr;
wire [`L15_PADDR_HI:0] tlb_paddr;
// TLB Snoop iface
wire tlb_snoop_val;
wire [63:0] tlb_snoop_entry;

wire dream_sp_val, dream_sp_rdwen;
wire [15:0] dream_sp_addr;
wire [511:0] dream_sp_bw;
wire [511:0] dream_sp_wdata;
wire [511:0] sp_dream_rdata;

wire dream_sp_rdy;

///////////////
// Decouplng //
///////////////
dcp dcp (
    .clk                        ( clk_gated                 ),
    .rst_n                      ( rst_n_f                   ),
    .system_tile_count          ( config_system_tile_count[`HOME_ID_WIDTH-1:0]),
    .home_alloc_method          ( config_home_alloc_method  ),

    .chipid                     ( config_chipid             ),
    .coreid_x                   ( config_coreid_x           ),
    .coreid_y                   ( config_coreid_y           ),
    // input from noc1
    .src_dcp_vr_noc1_val        ( splitter_dev1_vr_noc1_val  ),
    .src_dcp_vr_noc1_dat        ( splitter_dev1_vr_noc1_dat  ),
    .src_dcp_vr_noc1_rdy        ( splitter_dev1_vr_noc1_rdy  ),

    // output to noc1
    .dcp_dst_vr_noc1_val        ( dev1_merger_vr_noc1_val    ),
    .dcp_dst_vr_noc1_dat        ( dev1_merger_vr_noc1_dat    ),
    .dcp_dst_vr_noc1_rdy        ( dev1_merger_vr_noc1_rdy    ),

    // input from noc2
    .src_dcp_vr_noc2_val        ( splitter_dev1_vr_noc2_val  ),
    .src_dcp_vr_noc2_dat        ( splitter_dev1_vr_noc2_dat  ),
    .src_dcp_vr_noc2_rdy        ( splitter_dev1_vr_noc2_rdy  ),

    // output to noc2
    .dcp_dst_vr_noc2_val        ( dev1_merger_vr_noc2_val    ),
    .dcp_dst_vr_noc2_dat        ( dev1_merger_vr_noc2_dat    ),
    .dcp_dst_vr_noc2_rdy        ( dev1_merger_vr_noc2_rdy    ),

    // input from noc3
    .src_dcp_vr_noc3_val        ( splitter_dev1_vr_noc3_val  ),
    .src_dcp_vr_noc3_dat        ( splitter_dev1_vr_noc3_dat  ),
    .src_dcp_vr_noc3_rdy        ( splitter_dev1_vr_noc3_rdy  ),

    // Config iface
    .tlb_flush                  (tlb_flush), 
    .tlb_disable                (tlb_disable), 
    .tlb_conf_ptbase            (tlb_conf_ptbase), 
    .tlb_update                 (tlb_update),
    .nibbler_conf               (nibbler_conf),
    .nibbler_code               (nibbler_code),
    .conf_data                  (conf_data),
    .nibbler_ariane_data        (nibbler_ariane_data),

    // TLB request iface
    .tlb_req                    (tlb_req), 
    .tlb_ack                    (tlb_ack), 
    .tlb_exc_val                (tlb_exc_val), 
    .tlb_ptw_src                (tlb_ptw_vaddr[`TLB_SRC_NUM-1:0]), 
    .tlb_vaddr                  (tlb_vaddr), 
    .tlb_paddr                  (tlb_paddr[`DCP_PADDR-1:0]),

    // TLB snoop interface to DCP
    .tlb_snoop_val              (tlb_snoop_val),
    .tlb_snoop_entry            (tlb_snoop_entry),

    // SP iface
    .dream_sp_val               (dream_sp_val),
    .dream_sp_addr              (dream_sp_addr),
    .dream_sp_rdwen             (dream_sp_rdwen),
    .dream_sp_bw                (dream_sp_bw),
    .dream_sp_wdata             (dream_sp_wdata),
    .sp_dream_rdata             (sp_dream_rdata)
);

// MMU-L15 iface
wire l15_store,l15_interrupt;
wire                           mmutx_l15_val;
wire [`L15_PADDR_HI:0]         mmutx_l15_address;
wire [63:0]                    mmutx_l15_data;
wire [4:0]                     mmutx_l15_rqtype = l15_store ? `PCX_REQTYPE_STORE : `PCX_REQTYPE_LOAD;
wire                           mmutx_l15_nc     = l15_interrupt;
wire [2:0]                     mmutx_l15_size   = 3'b011; // 8 bytes
wire [`L15_AMO_OP_WIDTH-1:0]   mmutx_l15_amo_op = {`L15_AMO_OP_WIDTH{1'b0}};
wire                           l15_mmutx_val,l15_mmutx_ack;
wire [63:0] l15_rdata = mmutx_l15_address[3] ? l15_transducer_data_1 : l15_transducer_data_0;

io_mmu #(
      .VADDR (`DCP_VADDR),
      .DATA_TLB_ENTRIES (`DCP_TLB_SIZE)
  ) is_mmu (
        .clk_i                  ( clk_gated                 ),
        .rst_ni                 ( rst_n_f                   ),

        // Resquest iface 
        .req_i        (tlb_req),        // request address translation
        .vaddr_i      (tlb_vaddr),      // virtual address in
        .is_store_i   (1'b0),           // the translation is requested by a store
        // Response iface
        .hit_o        (tlb_ack),        // sent in the same cycle as the request if translation hits in the DTLB
        .paddr_o      (tlb_paddr),      // translated address
        // Exception interface
        .valid_o      (tlb_val),        // translation is valid
        .exc_val_o    (tlb_exc),        // address translation threw an exception
        .ptw_addr_o   (tlb_ptw_vaddr),  // address translation threw an exception

        // MMU Config iface
        .flush_i          (tlb_flush),
        .tlb_disable      (tlb_disable), 
        .tlb_conf_ptbase  (tlb_conf_ptbase), 
        .tlb_update       (tlb_update),
        .conf_data        (conf_data),

        // Control signals
        .asid_i           (1'b0),
        // Performance counter
        .tlb_miss_o      (),
    
        // TLB snoop interface to DCP
        .tlb_snoop_val              (tlb_snoop_val),
        .tlb_snoop_entry            (tlb_snoop_entry),
        // PTW memory interface
        .l15_store        (l15_store),
        .l15_interrupt    (l15_interrupt),
        .l15_val          (mmutx_l15_val),
        .l15_ack          (l15_mmutx_ack),
        .l15_address      (mmutx_l15_address),
        .l15_data         (mmutx_l15_data),
        .l15_rvalid       (l15_mmutx_val),
        .l15_rdata        (l15_rdata)
);

/////////////
// Nibbler //
/////////////
wire         nibbler_transducer_csr_wake;
wire         nibbler_transducer_csr_disable_nibbler;
wire         transducer_nibbler_int;
wire [66:0]  nibbler_transducer_imemreq_msg;
wire         nibbler_transducer_imemreq_nc;
wire         nibbler_transducer_imemreq_val;
wire         transducer_nibbler_imemreq_rdy;
wire [34:0]  transducer_nibbler_imemresp_msg;
wire         transducer_nibbler_imemresp_val;
wire         nibbler_transducer_imemresp_rdy;
wire         nibbler_transducer_use_addr_ext;
wire [7:0]   nibbler_transducer_memreq_addr_ext;
wire [31:0]  nibbler_transducer_memreq_data_ext;
wire [66:0]  nibbler_transducer_dmemreq_msg;
wire         nibbler_transducer_dmemreq_nc;
wire         nibbler_transducer_dmemreq_val;
wire         transducer_nibbler_dmemreq_rdy;
wire [34:0]  transducer_nibbler_dmemresp_msg;
wire         transducer_nibbler_dmemresp_val;
wire         nibbler_transducer_dmemresp_rdy;
wire [31:0]  nibbler_transducer_csr_status;


wire                           l15_nibblertx_ack;
wire [4:0]                     nibblertx_l15_rqtype;
wire [`L15_AMO_OP_WIDTH-1:0]   nibblertx_l15_amo_op;
wire [2:0]                     nibblertx_l15_size;
wire                           nibblertx_l15_val;
wire [`PHY_ADDR_WIDTH-1:0]     nibblertx_l15_address;
wire [63:0]                    nibblertx_l15_data;
wire                           nibblertx_l15_nc;
wire [`L15_THREADID_WIDTH-1:0] nibblertx_l15_threadid;
wire                           nibblertx_l15_prefetch;
wire                           nibblertx_l15_blockstore;
wire                           nibblertx_l15_blockinitstore;
wire [1:0]                     nibblertx_l15_l1rplway;
wire                           nibblertx_l15_invalidate_cacheline;
wire [32:0]                    nibblertx_l15_csm_data;
wire [63:0]                    nibblertx_l15_data_next_entry;
wire                           l15_nibblertx_val;
wire [15:0]                    nibbler_sp_addr;
wire [511:0]                   nibbler_sp_wdata;
wire [511:0]                   nibbler_sp_bw;
wire                           nibbler_sp_rdwen;
wire                           nibbler_sp_val;
wire                           nibbler_sp_rdy;
wire [511:0]                   sp_nibbler_rdata;

// pc_cmp signals
wire [47:0] pc_w;
wire inst_done;

generate if (`DCP_NIBBLER) begin : nibbler
wire [31:0] pc;


nibbler_Core nibbler_core(
        .clk           (clk_gated),
        .reset_l       (rst_n_f),
        .nibbler_csr_int   (nibbler_transducer_csr_wake),
        .nibbler_int       (transducer_nibbler_int),
        .csr_disable_nibbler(nibbler_transducer_csr_disable_nibbler),

        .nibbler_conf   (nibbler_conf),
        .nibbler_code   (nibbler_code),
        .conf_data      (conf_data),
        .nibbler_conf_read_data (nibbler_ariane_data),

        .imemreq_msg   (nibbler_transducer_imemreq_msg),
        .imemreq_nc    (nibbler_transducer_imemreq_nc),
        .imemreq_val   (nibbler_transducer_imemreq_val),
        .imemreq_rdy   (transducer_nibbler_imemreq_rdy),

        .imemresp_msg  (transducer_nibbler_imemresp_msg),
        .dmemreq_nc    (nibbler_transducer_dmemreq_nc),
        .imemresp_val  (transducer_nibbler_imemresp_val),
        .imemresp_rdy  (nibbler_transducer_imemresp_rdy),

        .use_addr_ext    (nibbler_transducer_use_addr_ext),
        .memreq_addr_ext (nibbler_transducer_memreq_addr_ext),
        .memreq_data_ext (nibbler_transducer_memreq_data_ext),

        .dmemreq_msg   (nibbler_transducer_dmemreq_msg),
        .dmemreq_val   (nibbler_transducer_dmemreq_val),
        .dmemreq_rdy   (transducer_nibbler_dmemreq_rdy),

        .dmemresp_msg  (transducer_nibbler_dmemresp_msg),
        .dmemresp_val  (transducer_nibbler_dmemresp_val),
        .dmemresp_rdy  (nibbler_transducer_dmemresp_rdy),

        .spmemreq_msg_addr  (nibbler_sp_addr),
        .spmemreq_msg_data  (nibbler_sp_wdata),
        .spmemreq_msg_bw    (nibbler_sp_bw),
        .spmemreq_rw        (nibbler_sp_rdwen),
        .spmemreq_val       (nibbler_sp_val),
        .spmemreq_rdy       (nibbler_sp_rdy),
        .spmemresp_msg_data (sp_nibbler_rdata),       

        .csr_status    (nibbler_transducer_csr_status),
        .pc            (pc)
    );

assign inst_done = nibbler_core.last_uop_Xhl;
assign pc_w = {{16{pc[31]}}, pc[31:0]};

nibbler_l15_transducer nibbler_l15_transducer(
        .clk                                (clk_gated),
        .rst_n                              (rst_n_f),

        .nibbler_transducer_csr_wake        (nibbler_transducer_csr_wake),
        .nibbler_transducer_csr_disable_nibbler(nibbler_transducer_csr_disable_nibbler),
        .nibbler_transducer_imemreq_msg     (nibbler_transducer_imemreq_msg),
        .nibbler_transducer_imemreq_nc      (nibbler_transducer_imemreq_nc),
        .nibbler_transducer_imemreq_val     (nibbler_transducer_imemreq_val),
        .nibbler_transducer_dmemreq_msg     (nibbler_transducer_dmemreq_msg),
        .nibbler_transducer_dmemreq_nc      (nibbler_transducer_dmemreq_nc),
        .nibbler_transducer_dmemreq_val     (nibbler_transducer_dmemreq_val),
        .nibbler_transducer_csr_status      (nibbler_transducer_csr_status),
        
        .nibbler_transducer_use_addr_ext    (nibbler_transducer_use_addr_ext),
        .nibbler_transducer_memreq_addr_ext (nibbler_transducer_memreq_addr_ext),
        .nibbler_transducer_memreq_data_ext (nibbler_transducer_memreq_data_ext),

        .l15_transducer_ack                 (l15_nibblertx_ack),
        .l15_transducer_header_ack          (l15_transducer_header_ack),
        
        .transducer_l15_rqtype              (nibblertx_l15_rqtype),
        .transducer_l15_amo_op              (nibblertx_l15_amo_op),
        .transducer_l15_size                (nibblertx_l15_size),
        .transducer_l15_val                 (nibblertx_l15_val),
        .transducer_l15_address             (nibblertx_l15_address),
        .transducer_l15_data                (nibblertx_l15_data),
        .transducer_l15_nc                  (nibblertx_l15_nc),
        
        .transducer_l15_threadid            (nibblertx_l15_threadid),
        .transducer_l15_prefetch            (nibblertx_l15_prefetch),
        .transducer_l15_blockstore          (nibblertx_l15_blockstore),
        .transducer_l15_blockinitstore      (nibblertx_l15_blockinitstore),
        .transducer_l15_l1rplway            (nibblertx_l15_l1rplway),
        .transducer_l15_invalidate_cacheline(nibblertx_l15_invalidate_cacheline),
        .transducer_l15_csm_data            (nibblertx_l15_csm_data),
        .transducer_l15_data_next_entry     (nibblertx_l15_data_next_entry),

        .l15_transducer_val                 (l15_nibblertx_val),
        .l15_transducer_returntype          (l15_transducer_returntype),

        .l15_transducer_data_0              (l15_transducer_data_0),
        .l15_transducer_data_1              (l15_transducer_data_1),

        .transducer_nibbler_imemreq_rdy     (transducer_nibbler_imemreq_rdy),
        .transducer_nibbler_imemresp_msg    (transducer_nibbler_imemresp_msg),
        .transducer_nibbler_imemresp_val    (transducer_nibbler_imemresp_val),
        .nibbler_transducer_imemresp_rdy    (nibbler_transducer_imemresp_rdy),
        .transducer_nibbler_dmemreq_rdy     (transducer_nibbler_dmemreq_rdy),
        .transducer_nibbler_dmemresp_msg    (transducer_nibbler_dmemresp_msg), 
        .transducer_nibbler_dmemresp_val    (transducer_nibbler_dmemresp_val),
        .nibbler_transducer_dmemresp_rdy    (nibbler_transducer_dmemresp_rdy),

        .int_recv                           (transducer_nibbler_int)
    );
end else begin : no_nibbler
    assign nibblertx_l15_val = 1'b0;
    assign inst_done = 1'b1;
    assign pc_w = 48'd0;
end endgenerate


/////////////////////////
// Nibbler:MMU Arbiter //
/////////////////////////

reg header_ack_q;
always @(posedge clk_gated) begin
    if (!rst_n_f) begin
        header_ack_q <= 1'b0;
    end else begin
        header_ack_q <= (l15_transducer_header_ack || header_ack_q ) && !l15_transducer_ack;
    end
end

wire l15_val_pre, l15_src;
rr_arbiter #(
  .SOURCES(2)
  ) u_l15_rr (
  .clk     (clk_gated),
  .reset_n (rst_n_f),
  .stall   (!l15_transducer_ack),
  .valid_source ({mmutx_l15_val,nibblertx_l15_val}),
  .arb_src_oh (),
  .arb_src (l15_src),
  .arb_val (l15_val_pre)
  );
  
assign transducer_l15_val = l15_val_pre && !header_ack_q;
assign transducer_l15_req_ack = l15_transducer_val; // Always accept response
assign transducer_l15_threadid = l15_src; // MMU=1; Nibbler=0
// Multiplex fields between MMU and Nibbler
assign transducer_l15_rqtype  = l15_src ?  mmutx_l15_rqtype : nibblertx_l15_rqtype;
assign transducer_l15_amo_op  = l15_src ?  mmutx_l15_amo_op : nibblertx_l15_amo_op;
assign transducer_l15_size    = l15_src ?  mmutx_l15_size : nibblertx_l15_size;
assign transducer_l15_address = l15_src ?  mmutx_l15_address : nibblertx_l15_address;
assign transducer_l15_data = l15_src ?  mmutx_l15_data : nibblertx_l15_data;
assign transducer_l15_nc   = l15_src ?  mmutx_l15_nc : nibblertx_l15_nc;

// Unused fields
assign transducer_l15_prefetch = 1'b0;
assign transducer_l15_blockstore = 1'b0;
assign transducer_l15_blockinitstore = 1'b0;
assign transducer_l15_l1rplway = 2'd0;
assign transducer_l15_invalidate_cacheline = 1'b0;
assign transducer_l15_csm_data = {`TLB_CSM_WIDTH{1'b0}};
assign transducer_l15_data_next_entry = 64'd0;

// Check response msgtype
wire l15_rtype_correct = (l15_transducer_returntype==`CPX_RESTYPE_LOAD) || (l15_transducer_returntype==`CPX_RESTYPE_STORE_ACK);
// Split L1.5 ack to appropriate 
assign l15_mmutx_ack = l15_src ? l15_transducer_ack : 1'b0;
assign l15_nibblertx_ack = l15_src ? 1'b0 : l15_transducer_ack;
// Send l1.5 message to appropriate destination
assign l15_mmutx_val = l15_transducer_val && l15_transducer_threadid && l15_rtype_correct;
assign l15_nibblertx_val = l15_transducer_val && !l15_transducer_threadid;

////////////////
// Scratchpad //
////////////////

wire [`BIST_OP_WIDTH-1:0] BIST_COMMAND;
wire [`SRAM_WRAPPER_BUS_WIDTH-1:0] BIST_DIN;
wire [`SRAM_WRAPPER_BUS_WIDTH-1:0] BIST_DOUT_0, BIST_DOUT_1, BIST_DOUT_2, BIST_DOUT_3;
wire [`BIST_ID_WIDTH-1:0] SRAMID;

scratchpad scratch_pad_inst (
    .MEMCLK         (clk_gated),
    .RESET_N        (rst_n_f),
    .DREAM_A        (dream_sp_addr),
    .DREAM_RDWEN    (dream_sp_rdwen),
    .DREAM_BW       (dream_sp_bw),
    .DREAM_DIN      (dream_sp_wdata),
    .DREAM_DOUT     (sp_dream_rdata),
    .NIBBLER_A      (nibbler_sp_addr),
    .NIBBLER_RDWEN  (nibbler_sp_rdwen),
    .NIBBLER_BW     (nibbler_sp_bw),
    .NIBBLER_DIN    (nibbler_sp_wdata),
    .NIBBLER_DOUT   (sp_nibbler_rdata),
    .BIST_COMMAND   (BIST_COMMAND),
    .BIST_DIN       (BIST_DIN),
    .BIST_DOUT_0    (BIST_DOUT_0),
    .BIST_DOUT_1    (BIST_DOUT_1),
    .BIST_DOUT_2    (BIST_DOUT_2),
    .BIST_DOUT_3    (BIST_DOUT_3),
    .SRAMID         (SRAMID),

    .dream_sp_val   (dream_sp_val),
    .nibbler_sp_val (nibbler_sp_val),
    .dream_sp_rdy   (dream_sp_rdy),
    .nibbler_sp_rdy (nibbler_sp_rdy)
);

endmodule
