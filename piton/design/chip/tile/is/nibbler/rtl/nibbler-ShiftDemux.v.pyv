// Copyright (c) 2024 Princeton University
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the copyright holder nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

`ifndef NIBBLER_SHIFT_DEMUX_V
`define NIBBLER_SHIFT_DEMUX_V
<%
from pyhplib import *
%>
module nibbler_ShiftDemux
(
  input reset,
  input clk,

  input direction, //1 = +1 = indexing one left (towards MSB).
  input en,

<%
print('  output reg ['+str(NIBBLER_C_OFFBITS-1)+':0]  idx  // Current index (to be read from)')
%>
);

<%
print('  localparam NIBBLER_C_OFFBITS = '+str(NIBBLER_C_OFFBITS)+';')
%>

// Address Calculation based on inputs
reg [NIBBLER_C_OFFBITS-1:0] idx_next;
always @(*) begin
  idx_next = idx;
  if (reset) begin
    idx_next = {NIBBLER_C_OFFBITS{1'b0}};
  end else if(en) begin
    if (direction) begin
      idx_next = idx + {{NIBBLER_C_OFFBITS-1{1'b0}}, 1'b1};
    end else begin
      idx_next = idx - {{NIBBLER_C_OFFBITS-1{1'b0}}, 1'b1};
    end
  end
end

// Note: not gating for now since it's in ctrl, not critical.
always @ (posedge clk) begin
  idx <= idx_next;
end

endmodule

`endif